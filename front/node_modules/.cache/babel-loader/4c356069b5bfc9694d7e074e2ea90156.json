{"ast":null,"code":"// מקבל \nlet makeStrToArr = str => {\n  let char;\n  let nextChar;\n  let numStr = '';\n  const arr = [];\n\n  for (let i = 0; i < str.length; i++) {\n    char = str.charAt(i);\n    nextChar = str.charAt(i + 1);\n\n    if (char === '+' || char === '-' || char === '/' || char === '*') {\n      if (numStr === '' || nextChar + 1 === '-') {\n        // add minus if first or minus number\n        numStr += char;\n      } else {\n        arr.push(numStr);\n        arr.push(char);\n        numStr = '';\n      }\n    } else {\n      numStr += char;\n\n      if (i === str.length - 1) {\n        arr.push(numStr);\n      }\n    }\n  }\n\n  return arr;\n};\n\nlet calc = numStr => {\n  const reg = /^([-]{0,1}\\d*[.]{0,1}\\d+)([/*+-]([-]{0,1}\\d*[.]{0,1}\\d+))*$/gm; // https://regex101.com/r/FNHIib/5\n\n  if (!reg.exec(numStr)) return console.error(numStr + ' -  is not calculated string');\n  let numArr = makeStrToArr(numStr);\n  let nextIndex;\n  let oneBefore;\n  let tempNum = false;\n  const newNumArr = [];\n  const arrLen = numArr.length;\n  console.log(arrLen);\n  console.log(numArr);\n  numArr.forEach((ele, i) => {\n    nextIndex = i + 1; // console.log(ele);\n\n    if (i === 0) {\n      tempNum = parseFloat(ele);\n    }\n\n    if (ele === '*') {\n      tempNum = tempNum * numArr[nextIndex];\n      oneBefore = true;\n    }\n\n    if (ele === '/') {\n      tempNum = tempNum / numArr[nextIndex];\n      oneBefore = true;\n    }\n\n    if (ele === '+' || ele === '-') {\n      newNumArr.push(tempNum);\n      newNumArr.push(ele);\n      tempNum = parseFloat(numArr[nextIndex]);\n      oneBefore = false;\n      console.log(newNumArr);\n    }\n\n    console.log(nextIndex);\n\n    if (arrLen === nextIndex) {\n      if (oneBefore) {\n        newNumArr.push(tempNum);\n        tempNum = false; // clean var for next loop\n      } else {\n        newNumArr.push(parseFloat(ele));\n        tempNum = false; // clean var for next loop\n      }\n\n      console.log(newNumArr);\n    }\n  });\n  console.log(newNumArr);\n  newNumArr.forEach((ele, i) => {\n    nextIndex = i + 1;\n\n    if (nextIndex === 1) {\n      tempNum = ele;\n    } else {\n      if (ele === '+') {\n        tempNum = tempNum + newNumArr[nextIndex];\n      }\n\n      if (ele === '-') {\n        tempNum = tempNum - newNumArr[nextIndex];\n      }\n    }\n  });\n  tempNum = tempNum.toFixed(12);\n  tempNum = parseFloat(tempNum);\n  tempNum = tempNum.toString();\n  return tempNum;\n};\n\nexport default calc;","map":{"version":3,"sources":["/home/amir/שולחן העבודה/project/maafe-malle/front/src/function/calc.js"],"names":["makeStrToArr","str","char","nextChar","numStr","arr","i","length","charAt","push","calc","reg","exec","console","error","numArr","nextIndex","oneBefore","tempNum","newNumArr","arrLen","log","forEach","ele","parseFloat","toFixed","toString"],"mappings":"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","sourcesContent":["// מקבל \r\nlet makeStrToArr = (str) => {\r\n\t\r\n\tlet char;\r\n\tlet nextChar;\r\n\tlet numStr = '';\r\n\tconst arr = []\r\n\tfor (let i = 0; i < str.length; i++) {\t\t\t\r\n\t\tchar = str.charAt(i);\r\n\t\tnextChar = str.charAt(i+1)\r\n\t\t\r\n\t\tif(char === '+' || char === '-' || char === '/' || char === '*'){\r\n\t\t\tif(numStr === '' || nextChar + 1 === '-'){ // add minus if first or minus number\r\n\t\t\t\tnumStr += char;\r\n\t\t\t}else{\r\n\t\t\t\tarr.push(numStr)\r\n\t\t\t\tarr.push(char)\r\n\t\t\t\tnumStr = ''\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tnumStr += char;\r\n\t\t\tif(i === str.length -1){\t\t\r\n\t\t\t\tarr.push(numStr)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\nlet calc = ( numStr ) => {\r\n\tconst reg = /^([-]{0,1}\\d*[.]{0,1}\\d+)([/*+-]([-]{0,1}\\d*[.]{0,1}\\d+))*$/gm;// https://regex101.com/r/FNHIib/5\r\n\tif (!reg.exec(numStr))\r\n\t\treturn console.error(numStr + ' -  is not calculated string');\r\n\t\r\n\tlet numArr = makeStrToArr(numStr)\r\n\tlet nextIndex;\r\n\tlet oneBefore;\r\n\tlet tempNum = false;\r\n\tconst newNumArr = [];\r\n\tconst arrLen = numArr.length;\r\n\tconsole.log(arrLen);\r\n\t\r\n\t\r\n\tconsole.log(numArr);\r\n\r\n\tnumArr.forEach((ele, i) => {\r\n\t\tnextIndex = i + 1;\r\n\t\t// console.log(ele);\r\n\t\tif (i === 0) {\t\r\n\t\t\t\ttempNum = parseFloat(ele);\t\r\n\t\t}\r\n\r\n\t\tif (ele === '*') {\r\n\t\t\ttempNum = tempNum * numArr[nextIndex];\r\n\t\t\toneBefore = true;\r\n\t\t}\r\n\t\tif (ele === '/') {\r\n\t\t\ttempNum = tempNum / numArr[nextIndex];\r\n\t\t\toneBefore = true;\r\n\t\t}\r\n\t\tif (ele === '+' || ele === '-') {\r\n\t\t\tnewNumArr.push(tempNum);\r\n\t\t\tnewNumArr.push(ele);\r\n\t\t\ttempNum = parseFloat(numArr[nextIndex]);\r\n\t\t\toneBefore = false;\r\n\t\t\t\r\n\t\t\tconsole.log(newNumArr);\r\n\t\t}\r\n\t\tconsole.log(nextIndex);\r\n\t\t\r\n\t\tif (arrLen === nextIndex) {\r\n\t\t\tif (oneBefore) {\r\n\t\t\t\tnewNumArr.push(tempNum);\r\n\t\t\t\ttempNum = false; // clean var for next loop\r\n\t\t\t} else {\r\n\t\t\t\tnewNumArr.push(parseFloat(ele));\r\n\t\t\t\ttempNum = false; // clean var for next loop\r\n\t\t\t}\r\n\t\t\tconsole.log(newNumArr);\r\n\t\t}\r\n\t});\r\n\tconsole.log(newNumArr);\r\n\tnewNumArr.forEach((ele, i) => {\r\n\t\tnextIndex = i + 1;\r\n\t\t\r\n\t\tif (nextIndex === 1) {\r\n\t\t\ttempNum = ele;\r\n\t\t} else {\r\n\t\t\tif (ele === '+') {\r\n\t\t\t\ttempNum = tempNum + newNumArr[nextIndex];\r\n\t\t\t}\r\n\t\t\tif (ele === '-') {\r\n\t\t\t\ttempNum = tempNum - newNumArr[nextIndex];\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\ttempNum = tempNum.toFixed(12)\r\n\ttempNum = parseFloat(tempNum)\r\n\ttempNum = tempNum.toString()\r\n\treturn tempNum\r\n};\r\n\r\nexport default calc;\r\n"]},"metadata":{},"sourceType":"module"}